##port por defecte de idprovider
server.port=8443
##informacion para conectar la mongodb
spring.data.mongodb.host=localhost
spring.data.mongodb.port=27017
spring.data.mongodb.database=id_provider_db
spring.data.mongodb.authentication-database=admin
spring.data.mongodb.username=root_provider
spring.data.mongodb.password=secret_provider
##informacion del keystore
idp.keystore.source = keystore/keystore.p12
idp.keystore.password = secret
idp.keystore.signing-key-alias = idprovider
## primer comando para generar un keystore donde almacenar el par de claves private/public, ejecutarlo desde dentro la carpeta src/resources/keystore
## $ keytool -genkeypair -alias idprovider -storetype pkcs12 -keyalg RSA -keysize 2048 -keystore keystore.p12 -validity 3650 -dname "CN=localhost, OU=idProvider, O=UPC, L=Barcelona, S=Catalunya, C=CA" -storepass secret
## segundo comando para listar la informacion del keystore
## $ keytool -v -list -keystore keystore.pkcs12

## HTTPS
server.ssl.enabled=true
server.ssl.key-store-type=PKCS12
server.ssl.key-store=classpath:keystore/keystore.p12
server.ssl.key-store-password=secret
server.ssl.key-alias=tomcathttps
## $ keytool -genkeypair -alias tomcathttps -storetype pkcs12 -keyalg RSA -keysize 2048 -keystore tomcat.p12 -validity 3650 -dname "CN=localhost, OU=idProvider, O=UPC, L=Barcelona, ST=Catalunya, C=CA" -storepass secret
## per exportar el certificat
## $ keytool -exportcert -alias tomcathttps -file MyCert.cer -storepass secret -keystore keystore.p12